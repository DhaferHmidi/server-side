import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { User } from './entities/user.entity';
import { Repository } from 'typeorm';
import { AuthService } from 'src/auth/auth/auth.service';
import { Observable } from 'rxjs';
export declare class UsersService {
    private usersRepository;
    private authService;
    constructor(usersRepository: Repository<User>, authService: AuthService);
    create(user: CreateUserDto): Observable<void>;
    findAll(): Observable<CreateUserDto[]>;
    findOne(id: number): Observable<{
        id: number;
        imageUrl: string;
        age: number;
        first_name: string;
        last_name: string;
        phone_number: number;
        email: string;
        registred_at: Date;
        coachs: import("../coachs/entities/coach.entity").Coach[];
        gyms: import("../gyms/entities/gym.entity").Gym[];
        events: import("../events/entities/event.entity").Event[];
        bmi: number;
        weight: number;
        height: number;
        adress: string;
    }>;
    login(user: CreateUserDto): Observable<string>;
    validateUser(email: string, password: string): Observable<{
        id: number;
        imageUrl: string;
        age: number;
        first_name: string;
        last_name: string;
        phone_number: number;
        email: string;
        registred_at: Date;
        coachs: import("../coachs/entities/coach.entity").Coach[];
        gyms: import("../gyms/entities/gym.entity").Gym[];
        events: import("../events/entities/event.entity").Event[];
        bmi: number;
        weight: number;
        height: number;
        adress: string;
    }>;
    update(id: number, updateUserDto: UpdateUserDto): void;
    remove(id: number): Promise<void>;
}
